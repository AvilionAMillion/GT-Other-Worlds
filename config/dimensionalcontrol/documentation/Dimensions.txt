The main purpose of this file is to register new dimensions and set script configs 
for them. It is also where WorldInfo scripts and BiomePrinters are set.



getClientConfigs:
    Notes:
        Gets the ClientConfigs object. Documentation for it can be found in documention/ClientConfigs.txt

addDimension:
    Arguments:
        int
    Usage:
        dimension ID
    Notes:
        Used to add a dimension with this id using the default overworld WorldProvider.

setGlobalWorldInfoDefinition:
    Notes:
        Sets the global WorldInfoDefinition object and returns it, so functions can be called on it. The same functions that can be called in a worldinfo script, can be called on this object. Documentation can be found in documentation/worldinfo/WorldInfo.txt

setWorldInfoForDimension:
    Arguments:
        String, int
    Usage:
        script name, dimension ID
    Notes:
        Sets the script to be used for the provided dimensions world info options.

setDimensionDefinition:
    Arguments:
        int
    Usage:
        dimension ID
    Notes:
        Sets the DimensionDefiniton object for the provided dimensionID and returns it, so functions can be called on it. The same functions that can be called in a dimension script, can be called on this object. Documentation can be found in documentation/dimensions/DimensionScript.txt

setDimensionDefinition:
    Arguments:
        int, DimensionDefinition
    Usage:
        dimension ID, dimension definition
    Notes:
        Sets the DimensionDefiniton for provided dimensionID.

setWorldInfoDefinition:
    Arguments:
        int
    Usage:
        dimension ID
    Notes:
        Sets the WorldInfoDefinition object for the provided dimensionID and returns it, so functions can be called on it. The same functions that can be called in a worldinfo script, can be called on this object. Documentation can be found in documentation/worldinfo/WorldInfo.txt

setWorldInfoDefinition:
    Arguments:
        int, WorldInfoDefinition
    Usage:
        dimension ID, definition
    Notes:
        Sets the WorldInfoDefinition for the provided dimensionID.

setPortalIgniterOreDict:
    Arguments:
        String
    Usage:
        ore dict name
    Notes:
        Sets the ore dictionary for the portal igniter. Any item from this ore dict will be usable to ignite custom portals. Returns the ItemData object for the portal igniter.

setPortalIgniterOreDict:
    Arguments:
        byte, String
    Usage:
        portal id, ore dict name
    Notes:
        Sets the ore dictionary for the portal igniter for the provided portal id. Any item from this ore dict will be usable to ignite the custom portal. Returns the ItemData object for the portal igniter.

setGlobalWorldInfo:
    Arguments:
        String
    Usage:
        script name
    Notes:
        Sets the script to be used for global world info options.

setScriptForDimension:
    Arguments:
        int, String
    Usage:
        dimension ID, script name
    Notes:
        Sets the dimension script for the provided dimensionID. The script will be searched for in config/dimensionalcontrol/dimensions/.

getPortalIgniterData:
    Notes:
        Returns the ItemData object for the portal igniter so functions can be called on it.

getPortalIgniterData:
    Arguments:
        byte
    Usage:
        portal id
    Notes:
        Returns the ItemData object for the portal igniter for the provided portal id so functions can be called on it.

setPortalIgniter:
    Arguments:
        String, Integer
    Usage:
        item name, meta
    Notes:
        Sets the portal igniter with the provided meta. This is the item that will be used to ignite any custom portals. Returns the ItemData object for the portal igniter.

setPortalIgniter:
    Arguments:
        String, Integer, String
    Usage:
        item name, meta, NBT Json
    Notes:
        Sets the portal igniter with the provided meta and NBT. This is the item that will be used to ignite any custom portals. Returns the ItemData object for the portal igniter.

setPortalIgniter:
    Arguments:
        byte, String, Integer
    Usage:
        portal id, item name, meta
    Notes:
        Sets the portal igniter with the provided meta for the provided portal id. This is the item that will be used to ignite the custom portal. Returns the ItemData object for the portal igniter.

setPortalIgniter:
    Arguments:
        byte, String
    Usage:
        portal id, item name
    Notes:
        Sets the portal igniter for the provided portal id. This is the item that will be used to ignite the custom portal. This counts for any meta. Returns the ItemData object for the portal igniter.

setPortalIgniter:
    Arguments:
        String
    Usage:
        item name
    Notes:
        Sets the portal igniter. This is the item that will be used to ignite any custom portals. This counts for any meta. Returns the ItemData object for the portal igniter.

setPortalIgniter:
    Arguments:
        byte, String, Integer, String
    Usage:
        portal id, item name, meta, NBT Json
    Notes:
        Sets the portal igniter with the provided meta and NBT for the provided portal id. This is the item that will be used to ignite the custom portal. Returns the ItemData object for the portal igniter.

setPortal:
    Arguments:
        byte, int, int, String
    Usage:
        portal ID, first dimension ID, second dimension ID, block ID
    Notes:
        Sets the portal of the provided id to be made of the provided block with the provided meta and travel between the two provided dimensions. Portal ID can be set to anything between -128 and 127

setPortal:
    Arguments:
        byte, int, int, String
    Usage:
        portal ID, first dimension ID, second dimension ID, block ID
    Notes:
        Sets the portal of the provided id to be made of the provided block with any meta and travel between the two provided dimensions. Portal ID can be set to anything between -128 and 127. The auto generated portal will be created using the default state of the provided block.

addBiomePrinter:
    Arguments:
        int, int, int, int, int, int, boolean
    Usage:
        dimension ID, height, width, spacing, startX, startZ, overwrite
    Notes:
        Used to add a biome printer for the selected dimension. I suggest 500 height, 500 width, 10 spacing, 0 startX, 0 startZ for most cases. This can take a long time, or even run the game out of memory in extreme cases, if the size is set too high. Images are saved to config/dimensionalcontrol/output and overwrite eachother if overwrite is set to true.

addBiomePrinter:
    Arguments:
        int, int, int, int, int, int
    Usage:
        dimension ID, height, width, spacing, startX, startZ
    Notes:
        Used to add a biome printer for the selected dimension. I suggest 500 height, 500 width, 10 spacing, 0 startX, 0 startZ for most cases. This can take a long time, or even run the game out of memory in extreme cases, if the size is set too high. Images are saved to config/dimensionalcontrol/output and overwrite eachother.

setPortalOreDict:
    Arguments:
        byte, int, int, String
    Usage:
        portal ID, first dimension ID, second dimension ID, oredict ID
    Notes:
        Sets the portal of the provided id to be made of blocks from the provided oredict and travel between the two provided dimensions. Portal ID can be set to anything between -128 and 127. The auto generated portal will be created using the default state of the first block in the oredict.

